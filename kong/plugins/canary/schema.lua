---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/2/21 10:18
---
local iputils = require "resty.iputils"
local protocols_with_subsystem = {
    http = "http",
    https = "http",
    tcp = "stream",
    tls = "stream"
}

local http_protocols = {}
for p, s in pairs(protocols_with_subsystem) do
    if s == "http" then
        http_protocols[#http_protocols + 1] = p
    end
end
table.sort(http_protocols)

local function validate_cidr_v4(ip)
    local _, err = iputils.parse_cidr(ip)

    -- It's an error only if the second variable is a string
    if type(err) == "string" then
        return nil, "invalid cidr range: " .. err
    end

    return true
end

local string_array = {
    type = "array",
    default = {},
    elements = { type = "string" },
}

local colon_string_array = {
    type = "array",
    default = {},
    --elements = { type = "string", },
    elements = {
        type = "string",
        custom_validator = validate_cidr_v4,
    },
}

local one_of = {
    type = "string",
    default = "header",
    one_of = { "header", "cookie", 'args' }
}

local ip_canary_record = {
    type = "record",
    fields = {
        { range = colon_string_array },
        { upstream = { type = "string" } },
    },
}

local uid_canary_record = {
    type = "record",
    fields = {
        { on = one_of },
        { name = { type = "string", default = "uid" } },
        { range = string_array },
        { upstream = { type = "string" } },
    }
}

local canary_on_record = {
    type = "record",
    fields = {
        { on = one_of },
        { name = { type = "string", } },
        { range = string_array },
        { upstream = { type = "string" } },
    }
}

return {
    name = "canary",
    fields = {
        --{ run_on = typedefs.run_on_first },
        { protocols = {
            type = "set",
            required = true,
            default = http_protocols,
            elements = { type = "string", one_of = http_protocols },
        } },
        { config = {
            type = "record",
            fields = {
                { canary_upstream = { type = "string", len_min = 1, required = true }, },
                { ip = ip_canary_record },
                { uid = uid_canary_record },
                { customize = canary_on_record },
            },
        },
        },
    },
}
